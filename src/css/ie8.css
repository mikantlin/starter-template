/*
	Helios by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
*/
/* Basic */
a {
  border-bottom: solid 1px #ddd; }

hr {
  border-top: solid 1px #777;
  border-bottom: solid 1px #777; }

.timestamp {
  color: #777; }

/* Section/Article */
section > .last-child, section.last-child, article > .last-child, article.last-child {
  margin-bottom: 0; }

/* List */
ul.divided li {
  border-top: solid 1px #777; }

ul.menu li {
  border-left: solid 1px #777; }

ul.icons {
  background: #333;
  -ms-behavior: url("assets/js/ie/PIE.htc"); }

/* Button */
.button {
  -ms-behavior: url("assets/js/ie/PIE.htc"); }

/* Icons */
.icon.circled {
  -ms-behavior: url("assets/js/ie/PIE.htc"); }

/* Header */
#header {
  -ms-behavior: url("assets/js/ie/backgroundsize.min.htc"); }

body.homepage #header {
  height: auto;
  min-height: 0;
  padding: 12em 0 12em 0; }
  body.homepage #header:after {
    display: none; }

/* Nav */
#nav > ul:before, #nav > ul:after {
  border-top: solid 1px #777;
  border-bottom: solid 1px #777; }

#nav > ul > li {
  -ms-behavior: url("assets/js/ie/PIE.htc"); }
  #nav > ul > li.active {
    border-color: #999; }

.dropotron {
  background: #fff;
  -ms-behavior: url("assets/js/ie/PIE.htc"); }
  .dropotron li {
    border-color: #eee;
    padding-right: 1em;
    color: #5b5b5b; }
  .dropotron.level-0 {
    -webkit-box-shadow: none !important;
            box-shadow: none !important;
    margin-top: 1em; }

/* Carousel */
.carousel .forward, .carousel .backward {
  border-radius: 100%;
  background-color: #483949;
  width: 7em;
  height: 7em;
  margin-top: -3.5em;
  border-radius: 100%;
  -ms-behavior: url("assets/js/ie/PIE.htc"); }
  .carousel .forward:before, .carousel .backward:before {
    display: none; }

.carousel .forward {
  right: -3.5em; }

.carousel .backward {
  left: -3.5em; }

/* Footer */
#footer ul.divided li {
  border-color: #3B373C; }

#footer ul.menu li {
  border-color: #3B373C; }

#footer hr {
  border-color: #3B373C; }

#footer .icons {
  background: #2F2930; }

#footer .copyright {
  color: #777; }
  #footer .copyright a {
    color: #aaa;
    border: 0; }
    #footer .copyright a:hover {
      color: #ccc; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
